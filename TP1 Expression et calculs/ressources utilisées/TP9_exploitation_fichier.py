import numpy as np
import matplotlib.pyplot as plt
import os
import csv
import math as m
from scipy.integrate import odeint
########
#os.chdir('A:\Chato_2015_2016\Informatique\TP10_exploitation_fichier')
fichier=open("TP9_acquisition1.txt","r")# Nécessite la conversion du fichier .xls en .csv
fichiercsv = csv.reader(fichier, delimiter=";")
##################### Extraction des données ############################################
nblignes=0
t=[]
uc=[]
for lignes in fichiercsv:
    if nblignes!=0:# la première ligne contient le titre de la colonne
        t.append(float(lignes[0]))# La première colonne correspond au temps
        uc.append(float(lignes[1]))#La deuxième colonne correspond à uc
    nblignes+=1
fichier.close()

plt.plot(t,uc,'+-b')
plt.grid()
plt.title("Tension aux bornes d'un condensateur")
plt.xlabel("Temps en seconde")
plt.ylabel("$u_c$ (V)")
##############################################
def determination_max(uc):
    max=[]
    for i in range(1,len(uc)-1):
        if uc[i]>uc[i-1] and uc[i]>uc[i+1]:
            max.append(i)
    return max
#############################################
def pseudoT(uc,t): # 3 méthodes toutes les valeurs de T, valeur moyenne T, comptage de nT
    listT=[]
    Tmoyen=0
    max=determination_max(uc)
    for i in range(len(max)-1):
        listT.append(t[max[i+1]]-t[max[i]])
    Tmesur=(t[max[-1]]-t[max[0]])/(len(max)-1)
    for k in listT:
        Tmoyen=Tmoyen+k
    Tmoyen=Tmoyen/len(listT)
    #return Tmesur,Tmoyen# On obtient les mêmes valeurs
    return Tmesur
##############################################
def decrement_log(uc):
    max=determination_max(uc)
    max1=max[0]
    max4=max[3]
    return 1/3*m.log(uc[max1]/uc[max4])
#############################################
def Q_et_w0(uc,t):
    delta = decrement_log(uc) 
    T = pseudoT(uc,t)
    Q = m.sqrt((m.pi/delta)**2+1/4)
    w0= 2*m.pi/T / m.sqrt(1 - 1/(4*Q**2))
    return Q,w0
#############################################
def R_et_L(uc,t):
    C=100e-9 #○ valeur de la capacité en farad
    Q,w0=Q_et_w0(uc,t)
    L=1/(w0**2*C)
    R=1/Q*m.sqrt(L/C)
    return R,L
############################################
Q,omega0=Q_et_w0(uc,t)
print("Q=",Q,"omega_0=",omega0)
uc0=9.8
uc0point=0
def phiX(X,t):
    uc=X[0]
    ucpoint=X[1]
    return ([ucpoint,-omega0**2*uc-omega0/Q*ucpoint])
#########################################################
X0=[uc0,uc0point]
#########################################################
sol=odeint(phiX,X0,t)
ucdiff=sol[:,0]
ucdiffpoint=sol[:,1]
#########################################################
plt.figure()
plt.plot(t,uc,'+-b',t,ucdiff,'x-g')
plt.xlabel('$t$ (s)')
plt.ylabel('$u_c(t)$ (V)')
plt.title('Tension aux bornes de C')
plt.legend(['exp','odeint'],loc=0)
plt.grid()
##########################################################
##### Trajectoire de phase ###############################
plt.figure()
plt.plot(ucdiff,ucdiffpoint,'-b')
plt.xlabel('$u_c$ (V)')
#plt.ylabel('$\frac{du_c}{dt}$ (V/s)')
plt.title('Trajectoire de phase')
plt.grid()
##########################################################





    
    
    

        
